{"ast":null,"code":"import { React } from \"react\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport { Formik } from \"formik\";\nimport * as Yup from \"yup\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport default function Formik_Form(_ref) {\n  var navigation = _ref.navigation;\n  return _jsxs(ScrollView, {\n    children: [_jsx(Text, {\n      style: {\n        textAlign: \"center\"\n      },\n      children: \"Login Form\"\n    }), _jsx(Formik, {\n      initialValues: {\n        username: \"\",\n        email: \"\",\n        password: \"\",\n        phone_number: \"\"\n      },\n      validationSchema: Yup.object({\n        username: Yup.string().required(\"Name is required\").min(3, \"Invalid Name!!\"),\n        email: Yup.string().email(\"Invalid email address\").required(\"email is Required\"),\n        password: Yup.string().required(\"password is Required\").min(9, \"too short\"),\n        phone_number: Yup.number(\"Invalid Phone Numer\").required(\"Phone Numer is required\")\n      }),\n      children: function children(props) {\n        return _jsxs(View, {\n          children: [_jsx(View, {\n            style: styles.inputView,\n            children: _jsx(TextInput, {\n              style: styles.TextInput,\n              placeholder: \"Email.\",\n              placeholderTextColor: \"#003f5c\",\n              onChangeText: function onChangeText(email) {\n                return setEmail(email);\n              }\n            })\n          }), _jsx(View, {\n            style: styles.inputView,\n            children: _jsx(TextInput, {\n              style: styles.TextInput,\n              placeholder: \"Password.\",\n              placeholderTextColor: \"#003f5c\",\n              secureTextEntry: true,\n              onChangeText: function onChangeText(password) {\n                return setPassword(password);\n              }\n            })\n          }), _jsx(TouchableOpacity, {\n            style: styles.loginBtn,\n            children: _jsx(Text, {\n              style: styles.loginText,\n              children: \"LOGIN\"\n            })\n          })]\n        });\n      }\n    })]\n  });\n}\nvar styles = StyleSheet.create({\n  inputView: {\n    backgroundColor: \"#FFC0CB\",\n    borderRadius: 30,\n    width: \"70%\",\n    height: 45,\n    marginBottom: 20,\n    alignItems: \"center\"\n  },\n  TextInput: {\n    height: 50,\n    flex: 1,\n    padding: 10,\n    marginLeft: 20\n  }\n});","map":{"version":3,"names":["React","ScrollView","Text","TextInput","View","StyleSheet","TouchableOpacity","Formik","Yup","jsx","_jsx","jsxs","_jsxs","Formik_Form","_ref","navigation","children","style","textAlign","initialValues","username","email","password","phone_number","validationSchema","object","string","required","min","number","props","styles","inputView","placeholder","placeholderTextColor","onChangeText","setEmail","secureTextEntry","setPassword","loginBtn","loginText","create","backgroundColor","borderRadius","width","height","marginBottom","alignItems","flex","padding","marginLeft"],"sources":["/home/marina/ITI/React_native/ITI-React-Native/APP/src/Pages/Formik_Form.js"],"sourcesContent":["import { React } from \"react\";\nimport { ScrollView, Text, TextInput, View, StyleSheet,TouchableOpacity } from \"react-native\";\nimport { Formik } from \"formik\";\nimport * as Yup from \"yup\";\n\nexport default function Formik_Form({ navigation }) {\n  return (\n    <ScrollView>\n      <Text style={{ textAlign: \"center\" }}>Login Form</Text>\n      <Formik\n        initialValues={{\n          username: \"\",\n          email: \"\",\n          password: \"\",\n          phone_number: \"\",\n        }}\n        validationSchema={Yup.object({\n          username: Yup.string()\n            .required(\"Name is required\")\n            .min(3, \"Invalid Name!!\"),\n\n          email: Yup.string()\n            .email(\"Invalid email address\")\n            .required(\"email is Required\"),\n\n          password: Yup.string()\n            .required(\"password is Required\")\n            .min(9, \"too short\"),\n\n          phone_number: Yup.number(\"Invalid Phone Numer\").required(\n            \"Phone Numer is required\"\n          ),\n        })}\n      >\n        {(props) => (\n          <View>\n            <View style={styles.inputView}>\n              <TextInput\n                style={styles.TextInput}\n                placeholder=\"Email.\"\n                placeholderTextColor=\"#003f5c\"\n                onChangeText={(email) => setEmail(email)}\n              />\n            </View>\n            <View style={styles.inputView}>\n              <TextInput\n                style={styles.TextInput}\n                placeholder=\"Password.\"\n                placeholderTextColor=\"#003f5c\"\n                secureTextEntry={true}\n                onChangeText={(password) => setPassword(password)}\n              />\n            </View>\n            <TouchableOpacity style={styles.loginBtn}>\n              <Text style={styles.loginText}>LOGIN</Text>\n            </TouchableOpacity>\n          </View>\n          // <View style={{ margin: 10 }}>\n          //   {/* user name */}\n          //   <View>\n          //     <TextInput\n          //       placeholder=\"name\"\n          //       onChangeText={props.handleChange(\"username\")}\n          //     />\n          //     {props.touched.username && props.errors.username ? (\n          //       <Text style={{ color: \"red\" }}>{props.errors.username}</Text>\n          //     ) : null}\n          //   </View>\n\n          //   {/* Email */}\n          //   <View>\n          //     <TextInput\n          //       placeholder=\"email address\"\n          //       onChangeText={props.handleChange(\"email\")}\n          //     />\n          //     {props.touched.email && props.errors.email ? (\n          //       <Text style={{ color: \"red\" }}>{props.errors.email}</Text>\n          //     ) : null}\n          //   </View>\n\n          //   {/* Password */}\n          //   <View>\n          //     <TextInput\n          //       placeholder=\"Password\"\n          //       secureTextEntry={true}\n          //       onChangeText={props.handleChange(\"password\")}\n          //     />\n          //     {props.touched.password && props.errors.password ? (\n          //       <Text style={{ color: \"red\" }}>{props.errors.password}</Text>\n          //     ) : null}\n          //   </View>\n\n          //   {/* Phone number */}\n          //   <View>\n          //     <TextInput\n          //       placeholder=\"phone number\"\n          //       onChangeText={props.handleChange(\"phone_number\")}\n          //     />\n          //     {props.touched.phone_number && props.errors.phone_number ? (\n          //       <Text style={{ color: \"red\" }}>\n          //         {props.errors.phone_number}\n          //       </Text>\n          //     ) : null}\n          //   </View>\n\n          //   <Button title=\"Login\" onPress={()=>{props.handleSubmit;navigation.navigate(\"Home\")}}/>\n\n          // </View>\n        )}\n      </Formik>\n    </ScrollView>\n  );\n  \n}\nconst styles = StyleSheet.create({\n  inputView: {\n    backgroundColor: \"#FFC0CB\",\n    borderRadius: 30,\n    width: \"70%\",\n    height: 45,\n    marginBottom: 20,\n    alignItems: \"center\",\n  },\n  TextInput: {\n    height: 50,\n    flex: 1,\n    padding: 10,\n    marginLeft: 20,\n  }\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}